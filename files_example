---1. HTTP Request
  An HTTP request is a message sent by the client to request a resource from the server. Below is an example of a GET request to retrieve the homepage (/index.html).

HTTP Request Example (GET request)
----------------------------------
GET /index.html HTTP/1.1
Host: www.example.com
User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:92.0) Gecko/20100101 Firefox/92.0
Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8
Accept-Language: en-US,en;q=0.5
Accept-Encoding: gzip, deflate, br
Connection: keep-alive
Upgrade-Insecure-Requests: 1
----------------------------
Breakdown:
GET /index.html: This is the method and resource the client is requesting (homepage).
Host: www.example.com: Specifies the host (domain name) of the server.
User-Agent: Information about the client's browser.
Accept: Types of content the client can handle (HTML, images, etc.).
Connection: keep-alive: The client wants to keep the connection open after receiving the response.
Upgrade-Insecure-Requests: Indicates the client prefers an HTTPS version of the page.

What Happens:
The client sends the request to the server.
The server analyzes the request (method, resource, headers) and processes it.
If the resource is found (like index.html), the server sends a response (200 OK), otherwise a 404 Not Found.

---2. HTTP Response
  The server responds with an HTTP response containing the status code, headers, and the requested resource (e.g., index.html).

HTTP Response Example (200 OK)
------------------------------
HTTP/1.1 200 OK
Date: Mon, 07 Oct 2024 12:34:56 GMT
Server: Custom-Server/1.0 (Ubuntu)
Content-Type: text/html; charset=UTF-8
Content-Length: 1024
Connection: keep-alive

<html>
  <head><title>Welcome to Example</title></head>
  <body>
    <h1>Hello, World!</h1>
    <p>Welcome to the homepage of www.example.com</p>
  </body>
</html>
--------------------------
Breakdown:
HTTP/1.1 200 OK: HTTP version and status code (200 OK indicates success).
Date: Date and time of the response.
Server: Information about the server software (in this case, a custom server).
Content-Type: Type of content being returned (text/html in this case).
Content-Length: Size of the content.
Connection: keep-alive: The connection remains open for additional requests.
Body: The actual HTML content requested by the client.

What Happens:
The server finds the requested file (index.html).
It sends back a 200 OK status code, headers (metadata about the response), and the HTML content in the response body.
The client (e.g., a browser) interprets the HTML to render the webpage.

---3. Configuration File (Inspired by Nginx)
  Nginx configuration files use directives to control how the server responds to requests, how it serves static files, and other behaviors. Here's an example inspired by Nginx.

Nginx-Inspired Configuration File Example
-----------------------------------------
server {
    listen 80;  # Listen on port 80 (HTTP)

    server_name www.example.com example.com;  # Server name (domain)

    # Root directory for the website
    root /var/www/example;

    # Default file to serve when directory is requested
    index index.html;

    # Logging paths for access and error logs
    access_log /var/log/nginx/example_access.log;
    error_log /var/log/nginx/example_error.log;

    # Handle requests to the root of the website
    location / {
        try_files $uri $uri/ =404;
    }

    # Specific configuration for /images/ path
    location /images/ {
        alias /var/www/example/images/;
        autoindex on;  # Enable directory listing
    }

    # Redirect HTTP to HTTPS
    location /secure/ {
        return 301 https://$server_name$request_uri;
    }

    # Error page handling
    error_page 404 /404.html;
    location = /404.html {
        root /var/www/example/errors;
    }

    # Proxy requests to a backend application server (for example, Python/Django)
    location /app/ {
        proxy_pass http://localhost:8000;  # Proxy requests to the application
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
    }
}
--------------------------
Breakdown:
server block: Defines a virtual server that listens on port 80 (HTTP).
server_name: Specifies the domain(s) the server responds to.
root: Defines the root directory where the website's files are stored (/var/www/example).
index: Defines the default file to serve when no file is specified (e.g., index.html).
location /: Handles requests to the root (e.g., /), trying to serve a file, or returning a 404 error if the file is not found.
location /images/: Serves files from a specific directory (/var/www/example/images/), and enables directory listing with autoindex.
Redirect to HTTPS: Redirects any request to /secure/ to the HTTPS version of the URL.
error_page 404: Specifies a custom 404 error page (/404.html), which is served when a file is not found.
location /app/: Proxies requests to a backend server running at localhost:8000 (e.g., a Python or Node.js app).

What Happens:
Request to /: The server will look for index.html in /var/www/example. If it exists, the server sends it back. If not, it returns a 404 error.
Request to /images/: Files in the /var/www/example/images/ directory are served directly. If no file is specified, a directory listing is provided.
Request to /secure/: The server redirects the client to the HTTPS version of the site.
Error Handling: If the user requests a non-existent page (e.g., /unknown), the server serves the custom 404 page (404.html).
Proxy Requests: Requests starting with /app/ are passed to a backend application running on a different port (like a Django or Flask application on port 8000).
------------------------
---Summary of What Happens:
Client sends an HTTP request to the server (for example, a GET request to /index.html).
Server processes the request:
If it's a static file request, the server retrieves the file from the file system (e.g., index.html).
If it's a dynamic request (like /app/), it proxies the request to a backend server.
Server sends an HTTP response back to the client with the content (for static files) or a response from the backend application.
Server configuration defines how the server behaves (what resources to serve, how to handle errors, redirection, etc.).
This structure provides a full overview of how an HTTP request is processed, how the server responds, and how the configuration file controls the serverâ€™s behavior.

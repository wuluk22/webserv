Simplified Project Split for MVP Version

    Team Member 1: Basic Server Functionality
        Responsibilities:
            Implement the main server loop.
            Handle incoming connections using blocking I/O (for simplicity).
            Parse HTTP requests and generate basic HTTP responses (e.g., serving static HTML files).
            Implement a basic logging mechanism to log incoming requests.
        Key Focus Areas:
            Networking Basics: Understand how to create sockets, bind to a port, listen for connections, and accept connections.
            HTTP Protocol Basics: Familiarity with HTTP requests and responses, focusing on serving static content.

    Team Member 2: Configuration Management and File Serving
        Responsibilities:
            Implement the configuration file parser to load server settings (e.g., root directory, log file).
            Handle serving of static files (like HTML, CSS, and JS) from the designated root directory.
            Implement a simple mechanism to handle 404 errors (file not found).
        Key Focus Areas:
            File System Interaction: Understand how to read files from the filesystem.
            Configuration Management: Learn to read from configuration files and apply settings.

    Team Member 3: Basic Error Handling and Testing
        Responsibilities:
            Implement basic error handling and create simple custom error pages (like 404.html).
            Write unit tests for the basic functionalities implemented by the other two members (if applicable).
            Document the codebase and help with README or usage instructions for the server.
        Key Focus Areas:
            Error Handling: Design user-friendly error pages to inform users when things go wrong.
            Testing Practices: Learn how to write basic tests to verify server functionality.

-------------------------------------------------------------

webserv/
│
├── docs/                     # Documentation files
│   ├── architecture.md       # Architecture overview
│   ├── usage.md              # Usage instructions
│   ├── api.md                # API documentation
│   └── contributing.md        # Guidelines for contributing
│
├── src/                      # Source code directory
│   ├── main.cpp              # Entry point of the server
│   ├── WebServer.cpp         # WebServer class implementation
│   ├── WebServer.hpp         # WebServer class header
│   ├── ConfigParser.cpp       # Configuration parsing logic
│   ├── ConfigParser.hpp       # Configuration header
│   ├── HttpRequest.cpp        # HTTP request handling logic
│   ├── HttpRequest.hpp        # HTTP request class header
│   ├── HttpResponse.cpp       # HTTP response handling logic
│   ├── HttpResponse.hpp       # HTTP response class header
│   ├── AuthHandler.cpp        # Authentication logic
│   ├── AuthHandler.hpp        # Authentication header
│   ├── Logger.cpp             # Logging functionality
│   ├── Logger.hpp             # Logging header
│   ├── DirectoryListingHandler.cpp # Directory listing logic
│   ├── DirectoryListingHandler.hpp # Directory listing header
│   └── VirtualHostHandler.cpp  # Virtual host handling logic
│   └── VirtualHostHandler.hpp  # Virtual host header
│
├── tests/                    # Unit tests directory
│   ├── test_http_request.cpp  # Tests for HttpRequest
│   ├── test_http_response.cpp  # Tests for HttpResponse
│   ├── test_auth_handler.cpp   # Tests for AuthHandler
│   ├── test_config_parser.cpp  # Tests for ConfigParser
│   └── test_logger.cpp         # Tests for Logger
│
├── configs/                  # Configuration files
│   └── server.conf            # Main server configuration
│
├── error_pages/              # Custom error pages
│   ├── 404.html              # Not Found page
│   └── 500.html              # Internal Server Error page
│
├── .gitignore                 # Git ignore file
├── README.md                  # Project overview and setup instructions
└── Makefile                   # Build configuration (if applicable)

---------------------------------------------

Core Relationships and Class Responsibilities

---------------------------------------------

    WebServer:
        Responsibility: This is the main class that coordinates all other components. It initializes the server, listens for connections, and delegates tasks (like handling requests and responses) to other classes.
        Dependencies:
            ConfigParser for reading the configuration file.
            HttpRequest and HttpResponse to handle the HTTP request/response lifecycle.
            Logger for logging events and errors.
            VirtualHostHandler to resolve the correct host (if multiple virtual hosts are defined).
            DirectoryListingHandler for directory listing functionality.
            ErrorHandler for custom error pages.
            Optional: CGIHandler if CGI support is required.

    Code Example:

class WebServer {
public:
    WebServer(int port, const std::string& config_file)
        : port_(port), config_(ConfigParser::parseConfig(config_file)), 
          logger_(config_.log_file),
          virtual_host_handler_(config_.virtual_hosts), 
          directory_listing_handler_(config_.enable_directory_listing),
          error_handler_(config_.error_pages_dir),
          cgi_handler_(config_.enable_cgi) {}

    void run() {
        // Start listening on the specified port
        // Accept connections and process requests
        while (true) {
            // Accept connections, process requests
            auto client_socket = acceptConnection();
            processRequest(client_socket);
        }
    }

private:
    int port_;
    ServerConfig config_;                 // Holds server configuration
    Logger logger_;                       // Logs events and errors
    VirtualHostHandler virtual_host_handler_; // Handles requests for different hosts
    DirectoryListingHandler directory_listing_handler_; // Generates directory listings
    ErrorHandler error_handler_;          // Sends custom error responses
    CGIHandler cgi_handler_;              // Executes CGI scripts (optional)

    void processRequest(int client_socket);
    // More server logic...
};

-----------------------------------------------------

ConfigParser:

    Responsibility: Parses the configuration file and populates a ServerConfig structure.
    Dependencies:
        ServerConfig struct which holds configuration data.

Code Example:

struct ServerConfig {
    std::string root_dir;
    std::string log_file;
    std::map<std::string, std::string> virtual_hosts;
    std::map<std::string, std::string> mime_types;
    bool enable_directory_listing;
    std::string error_pages_dir;
    bool enable_cgi;
};

class ConfigParser {
public:
    static ServerConfig parseConfig(const std::string& config_file) {
        ServerConfig config;
        // Parse logic for config file
        return config;
    }
};

-----------------------------------------------------

HttpRequest & HttpResponse:

    Responsibility: HttpRequest handles parsing incoming client requests, while HttpResponse generates the response to be sent back.
    Dependencies: Both depend on each other within the request-response cycle in WebServer.

Code Example:

class HttpRequest {
public:
    explicit HttpRequest(int socket);
    std::string getMethod() const;
    std::string getUrl() const;
    std::string getHeader(const std::string& name) const;
    // Parse the request data from client socket
};

class HttpResponse {
public:
    HttpResponse(int client_socket);
    void setStatusCode(int code);
    void addHeader(const std::string& name, const std::string& value);
    void sendResponse(const std::string& body);
};

WebServer usage:

void WebServer::processRequest(int client_socket) {
    HttpRequest request(client_socket);
    HttpResponse response(client_socket);
    
    // Handle request
    std::string url = request.getUrl();
    if (url == "/") {
        response.setStatusCode(200);
        response.sendResponse("<html><body>Hello, World!</body></html>");
    } else {
        error_handler_.handleError(404, response);  // Use ErrorHandler for 404 errors
    }
}

-----------------------------------------------------

AuthHandler:

    Responsibility: Validates credentials based on the Authorization header for Basic Authentication.
    Dependencies: Works with HttpRequest to fetch the Authorization header.

Code Example:

class AuthHandler {
public:
    AuthHandler(const std::map<std::string, std::pair<std::string, std::string>>& auth_config)
        : auth_config_(auth_config) {}

    bool authenticate(const HttpRequest& request);

private:
    std::map<std::string, std::pair<std::string, std::string>> auth_config_;
};

bool AuthHandler::authenticate(const HttpRequest& request) {
    std::string auth_header = request.getHeader("Authorization");
    // Authentication logic...
    return true;
}

WebServer usage:

void WebServer::processRequest(int client_socket) {
    HttpRequest request(client_socket);
    HttpResponse response(client_socket);

    if (!auth_handler_.authenticate(request)) {
        response.setStatusCode(401);
        response.sendResponse("Unauthorized");
        return;
    }
    
    // Proceed with normal request handling...
}

-----------------------------------------------------

Logger:

    Responsibility: Logs all server activity (requests, errors).
    Dependencies: None.

Code Example:

class Logger {
public:
    Logger(const std::string& log_file);
    void logRequest(const HttpRequest& request);
    void logError(const std::string& error_message);
};

WebServer usage:

void WebServer::processRequest(int client_socket) {
    HttpRequest request(client_socket);
    logger_.logRequest(request);  // Log incoming request
    // Handle the request...
}

-----------------------------------------------------

VirtualHostHandler:

    Responsibility: Routes requests to the correct document root based on the Host header in the HTTP request.
    Dependencies: Works with HttpRequest to fetch the Host header.

Code Example:

class VirtualHostHandler {
public:
    VirtualHostHandler(const std::map<std::string, std::string>& hosts)
        : hosts_(hosts) {}

    std::string resolveHost(const std::string& host_header);

private:
    std::map<std::string, std::string> hosts_;
};

WebServer usage:

void WebServer::processRequest(int client_socket) {
    HttpRequest request(client_socket);
    std::string host = request.getHeader("Host");
    std::string document_root = virtual_host_handler_.resolveHost(host);
    // Serve the requested file from the resolved document root...
}

-----------------------------------------------------

DirectoryListingHandler:

    Responsibility: Generates a directory listing for a folder if no default index.html exists.
    Dependencies: Works with the file system to read directories.

Code Example:

class DirectoryListingHandler {
public:
    DirectoryListingHandler(bool enable_listing)
        : enable_listing_(enable_listing) {}

    std::string generateListing(const std::string& directory_path);

private:
    bool enable_listing_;
};

WebServer usage:

void WebServer::processRequest(int client_socket) {
    HttpRequest request(client_socket);
    std::string path = config_.root_dir + request.getUrl();
    
    if (isDirectory(path) && directory_listing_handler_.isEnabled()) {
        std::string listing = directory_listing_handler_.generateListing(path);
        HttpResponse response(client_socket);
        response.setStatusCode(200);
        response.sendResponse(listing);
    }
}

-----------------------------------------------------

ErrorHandler:

    Responsibility: Manages error responses (like 404, 500) and sends custom error pages.
    Dependencies: None.

Code Example:

    class ErrorHandler {
    public:
        ErrorHandler(const std::string& error_pages_dir)
            : error_pages_dir_(error_pages_dir) {}

        void handleError(int status_code, HttpResponse& response);

    private:
        std::string error_pages_dir_;
    };

-----------------------------------------------------

Summary of Class Interactions:

    WebServer is the main orchestrator that interacts with almost every other class, like HttpRequest, HttpResponse, Logger, AuthHandler, VirtualHostHandler, DirectoryListingHandler, and ErrorHandler.
    HttpRequest and HttpResponse are used to handle the HTTP protocol and are passed around to various components like AuthHandler, ErrorHandler, and Logger.
    ConfigParser only interacts with WebServer to provide the configuration data.
    Logger logs events and errors but doesn’t depend on other classes.
    AuthHandler, VirtualHostHandler, and **DirectoryListing
